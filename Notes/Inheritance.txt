Inheritance
-----------------
-> Aquaring properties of a super class into sub class.
-> super/base/parent -> sub class/child class/derrived class

Uses
-----
	-> Code reusability
	-> Partial data abstraction
	-> method overriding
Class relationships

	-> is 'A' relation ship
	-> has 'A' relation ship
Method Overriding
--------------------
	-> defining the same method name with same signature of a super class into 
           sub class is called method overriding

   method signature:
		-> name of method
		-> number of arguments
		-> type of arguments
		-> postition of arguments
		-> scope of a method (public, default,private and protected)
		-. Return type of a methodz`

Method overnoading is called as 'static poly-morphism'
Method overriding is called as  'dynamic poly-morphism'


Notes
------
	-> Sub class object contains copy of super data.
	-> Sub class object can access instance variables, instance methods and constructors
           of a super class
	-> Super class object cannnot access anything from sub class
	-> We cannot override static methods
	-> We cannot define constructors as static
	-> Constructors can be overloded, but cannot overrriden
	-> To make sure method overriden happening smoothly use '@Override' annotation
	-> java.lang.Object is super class to every class in java by default
	-> super  keyword is used to access data of a super class from sub class overrriden
           methods

 

 Overridden methods scores
------------------------------
-> if a super class method is defined as default, thne sub class overriden method can be
   defined as default, public and protected

-> If a super class method is defined as public , then sub class method can be defined as 
   only public

-> If a super class method is defined as procted, then sub class method can be defined as
   procted and public


Notes
----------
-> A super class referance object can store all its sub class objects
-> The referance of a super class can be used to access every method in the super class
   and overriden methods of a sub class (a method which is there in the super class and 
   sub class)
-> The reference of a super class can not be used to access the individual methods of a 
   sub class (A method which is not there in the super class and only there in the sub
   class)






















